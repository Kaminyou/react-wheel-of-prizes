{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["WheelComponent","buttonText","current_segment","isStarted","useState","timerHandle","angleCurrent","angleDelta","canvasContext","maxSpeed","Math","spinStart","frames","useEffect","wheelInit","setTimeout","window","initCanvas","wheelDraw","canvas","document","navigator","spin","Date","setInterval","onTimerTick","draw","duration","getTime","progress","finished","setFinished","onFinished","clearInterval","clear","drawWheel","drawNeedle","drawSegment","key","lastAngle","angle","ctx","value","segments","seg_colors","contrastColor","size","len","PI2","primaryColor","i","centerY","centerX","change","id","width","height","style","pointerEvents","isFinished","App","winning_segment","winner","console","log","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.d32713b5.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport styles from './styles.module.css'\n\nexport const WheelComponent = ({\n  segments,\n  seg_colors,\n  winning_segment,\n  onFinished,\n  primaryColor,\n  contrastColor,\n  buttonText\n}) => {\n  let current_segment = ''\n  let isStarted = false;\n  const [isFinished, setFinished] = useState(false)\n  let timerHandle = 0\n  let timerDelay = 33\n  let angleCurrent = 0\n  let angleDelta = 0\n  let size = 290\n  let canvasContext = null\n  let maxSpeed = Math.PI / 16\n  let upTime = 500\n  let downTime = 10000\n  let spinStart = 0\n  let frames = 0\n  let centerX = 300\n  let centerY = 300\n  useEffect(() => {\n    wheelInit();\n    setTimeout(() => {\n      window.scrollTo(0, 1)\n    }, 0)\n  }, [])\n  const wheelInit = () => {\n    initCanvas()\n    wheelDraw()\n  }\n  \n  const initCanvas = () => {\n    let canvas = document.getElementById('canvas')\n    if (navigator.appVersion.indexOf('MSIE') !== -1) {\n      canvas = document.createElement('canvas')\n      canvas.setAttribute('width', 1000)\n      canvas.setAttribute('height', 600)\n      canvas.setAttribute('id', 'canvas')\n      document.getElementById('wheel').appendChild(canvas)\n    }\n    canvas.addEventListener('click', spin, false)\n    canvasContext = canvas.getContext('2d')\n  }\n  const spin = () => {\n    isStarted = true;\n    if (timerHandle === 0) {\n      spinStart = new Date().getTime()\n      maxSpeed = Math.PI / (16 + Math.random())\n      frames = 0\n      timerHandle = setInterval(onTimerTick, timerDelay)\n    }\n  }\n  const onTimerTick = () => {\n    frames++\n    draw()\n    let duration = new Date().getTime() - spinStart\n    let progress = 0\n    let finished = false\n    if (duration < upTime) {\n      progress = duration / upTime\n      angleDelta = maxSpeed * Math.sin((progress * Math.PI) / 2)\n    } else {\n      if (winning_segment) {\n        if (current_segment === winning_segment && frames > 240) {\n          progress = 1\n          \n          \n        } else {\n          progress = duration / downTime\n          angleDelta =\n            maxSpeed * Math.sin((progress * Math.PI) / 2 + Math.PI / 2)\n        }\n      } else {\n        progress = duration / downTime\n        angleDelta = maxSpeed * Math.sin((progress * Math.PI) / 2 + Math.PI / 2)\n      }\n      if (progress >= 1) finished = true\n    }\n\n    angleCurrent += angleDelta\n    while (angleCurrent >= Math.PI * 2) angleCurrent -= Math.PI * 2\n    if (finished) {\n      setFinished(true);\n      onFinished(current_segment);\n      clearInterval(timerHandle);\n      timerHandle = 0;\n      angleDelta = 0;\n    }\n  }\n\n  const wheelDraw = () => {\n    clear()\n    drawWheel()\n    drawNeedle()\n  }\n\n  const draw = () => {\n    clear()\n    drawWheel()\n    drawNeedle()\n  }\n\n  const drawSegment = (key, lastAngle, angle) => {\n    let ctx = canvasContext\n    let value = segments[key]\n    ctx.save()\n    ctx.beginPath()\n    ctx.moveTo(centerX, centerY)\n    ctx.arc(centerX, centerY, size, lastAngle, angle, false)\n    ctx.lineTo(centerX, centerY)\n    ctx.closePath()\n    ctx.fillStyle = seg_colors[key]\n    ctx.fill()\n    ctx.stroke()\n    ctx.save()\n    ctx.translate(centerX, centerY)\n    ctx.rotate((lastAngle + angle) / 2)\n    ctx.fillStyle = contrastColor || 'white'\n    ctx.font = 'bold 1em proxima-nova'\n    ctx.fillText(value.substr(0, 20), size / 2 + 20, 0)\n    ctx.restore()\n  }\n\n  const drawWheel = () => {\n    let ctx = canvasContext\n    let lastAngle = angleCurrent\n    let len = segments.length\n    let PI2 = Math.PI * 2\n    ctx.lineWidth = 1\n    ctx.strokeStyle = primaryColor || 'black'\n    ctx.textBaseline = 'middle'\n    ctx.textAlign = 'center'\n    ctx.font = '1em proxima-nova'\n    for (let i = 1; i <= len; i++) {\n      let angle = PI2 * (i / len) + angleCurrent\n      drawSegment(i - 1, lastAngle, angle)\n      lastAngle = angle\n    }\n\n     // Draw a center circle\n     ctx.beginPath();\n     ctx.arc(centerX, centerY, 50, 0, PI2, false);\n     ctx.closePath();\n     ctx.fillStyle =primaryColor || \"black\";\n     ctx.lineWidth = 10;\n     ctx.strokeStyle = contrastColor || \"white\";\n     ctx.fill();\n     ctx.font = \"bold 1em proxima-nova\";\n     ctx.fillStyle = contrastColor || 'white';\n     ctx.textAlign = \"center\";\n     ctx.fillText(buttonText || 'Spin',\n       centerX,\n       centerY + 3\n     );\n     ctx.stroke();\n \n     // Draw outer circle\n     ctx.beginPath();\n     ctx.arc(centerX, centerY, size, 0, PI2, false);\n     ctx.closePath();\n \n     ctx.lineWidth = 10;\n     ctx.strokeStyle = primaryColor || \"black\";\n     ctx.stroke();\n  \n  }\n\n  const drawNeedle = () => {\n    let ctx = canvasContext\n    ctx.lineWidth = 1\n    ctx.strokeStyle = contrastColor || 'white'\n    ctx.fileStyle = contrastColor || 'white'\n    ctx.beginPath()\n    ctx.moveTo(centerX + 20, centerY - 50)\n    ctx.lineTo(centerX - 20, centerY - 50)\n    ctx.lineTo(centerX, centerY - 70)\n    ctx.closePath()\n    ctx.fill()\n    let change = angleCurrent + Math.PI / 2\n    let i =\n      segments.length -\n      Math.floor((change / (Math.PI * 2)) * segments.length) -\n      1\n    if (i < 0) i = i + segments.length\n    ctx.textAlign = 'center'\n    ctx.textBaseline = 'middle'\n    ctx.fillStyle = primaryColor || \"black\";\n    ctx.font = 'bold 1.5em proxima-nova'\n    current_segment = segments[i]\n    isStarted && ctx.fillText(current_segment, centerX + 10, centerY + size + 50)\n  }\n  const clear = () => {\n    let ctx = canvasContext\n    ctx.clearRect(0, 0, 1000, 800)\n  }\n  return (\n    <div id='wheel'>\n      <canvas\n        id='canvas'\n        width='1000'\n        height='800'\n        style={{\n          pointerEvents: isFinished ? 'none' : 'auto'\n        }}\n      ></canvas>\n    </div>\n  )\n}\n","import React from 'react'\n\nimport { WheelComponent } from 'react-wheel-of-prizes'\nimport 'react-wheel-of-prizes/dist/index.css'\n\nconst App = () => {\n  const segments = ['better luck next time', 'won 70', 'won 10','better luck next time', 'won 2', 'won uber pass', 'better luck next time', 'won a voucher'];\n  const seg_colors = [\n    \"#EE4040\",\n    \"#F0CF50\",\n    \"#815CD1\",\n    \"#3DA5E0\",\n    \"#34A24F\",\n    \"#F9AA1F\",\n    \"#EC3F3F\",\n    \"#FF9000\",\n  ];\n  const onFinished = (winner) => {\n    console.log(winner);\n  }\n  return <WheelComponent\n  segments = {segments}\n  seg_colors = {seg_colors} \n  winning_segment ='won 10'\n  onFinished={(winner)=>onFinished(winner)}\n  primaryColor='black'\n  contrastColor='white'\n  buttonText='Spin'/>\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}